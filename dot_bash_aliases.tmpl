#########################################################
# add by user begin
#########################################################
# builtin-colorize
alias diff='diff --color=auto'
alias grep='grep --color=auto'
alias ls='ls --color=auto'
alias ip='ip --color=auto'

# builtin-overwrite
alias ll='ls -alF'
alias la='ls -a'
alias l='ls'
# builtin-utility
## cd
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias .....='cd ../../../..'
## search
alias 'psa'='ps ax'
alias 'lsofi'='lsof -i -P'
## git
alias g='git'
alias ga='fga'
alias gd='fgd'
alias gs='git status'
alias gp='git push'
alias gb='git branch'
alias gst='git status'
alias gco='git checkout'
alias gf='git fetch'
alias gc='git commit'
alias gcfg='git config'
alias gqp='git add . && git commit -m fix && git push'
alias cdg='cd $(git rev-parse --show-toplevel)'  # cd to .git project root
## safety
alias cp='cp -i'
alias mv='mv -i'
alias rm='rm -i'
## shell
alias reload='exec $SHELL -l'

# replace commands to modern cli tools
if [ "$(command -v exa)" ] && exa --version > /dev/null 2>&1; then
  ## ls, tree to exa
  alias exa='exa -a --time-style long-iso'
  alias ls='exa -a'
  alias tree='exa --tree'
fi
if [ "$(command -v bat)" ] && bat --version > /dev/null 2>&1; then
  ## cat, less to bat
  ### not working on glibc < 2.29
  alias cat='bat --paging=never --color=always'
  alias less='bat --paging=always --color=always'
fi
if [ "$(command -v zoxide)" ] && zoxide --version > /dev/null 2>&1; then
  ## cd to z
  alias ..='z ..'
  alias ...='z ../..'
  alias ....='z ../../..'
  alias .....='z ../../../..'
  alias c='z'
  alias cd='z'
fi
if [ "$(command -v fzf)" ] && fzf --version > /dev/null 2>&1; then
  ## fzf
  ### common
  export FZF_DEFAULT_OPTS='--height 40% +s --multi --cycle --reverse --info=hidden --select-1 --exit-0'
  export FZF_CTRL_T_COMMAND='rg --files --hidden --follow --glob "!.git/*"'
  # fzf completion
  if [ -e "$HOME/.local/share/fzf/fzf-bash-completion.sh" ]; then
    . $HOME/.local/share/fzf/fzf-bash-completion.sh
    bind -x '"\t\t": fzf_bash_completion'
  fi
  ### history
  _fzf_search_history() {  ## Ctrl + r history search with fzf
  	local l=$(HISTTIMEFORMAT= history | \
  	sort -r | sed -E s/^\ *[0-9]\+\ \+// | \
  	fzf --query "$READLINE_LINE")
  	READLINE_LINE="$l"
  	READLINE_POINT=${#l}
  }
  bind -x '"\C-r": _fzf_search_history'
fi
if [ "$(command -v gojq)" ] && gojq --version > /dev/null 2>&1; then
  ## jq to gojq
  alias jq='gojq'
fi
if [ "$(command -v nvim)" ] && nvim --version > /dev/null 2>&1; then
  ## vim to nvim
  alias vim='nvim'
  alias vi='nvim'
fi

# fuzzy command
## https://github.com/junegunn/fzf/wiki/Examples
### edit
#### defined on $HOME/.bash_function
fe () {
  IFS=$'\n' files=$(fselectfiles $@)
  [ -n "$files" ] && eval ${EDITOR:-vim} "${files[*]}"
}
alias edit='fe'
alias fedit='fe'
### cd from dir
fcd () {
  local paths
  paths=$(fselectdirectories $@)
  z ${paths:?is empty} || true
}
### diff
fdiff () {
  IFS=$'\n' files=$(fselectfiles $@)
  [ -n "$files" ] && echo ${files[*]} | xargs -n 2 delta
}
### kill
fkill() {
  local pid
  pid=$(ps -ef | sed 1d | fzf -m | awk '{print $2}')

  if [ "x$pid" != "x" ]
  then
    echo $pid | xargs kill -${1:-9}
  fi
}
### git
#### add
fga () {
  local selected
  selected=$(git status -s | fzf -m --ansi --preview="echo {} | awk '{print \$2}' | xargs git diff --color" | awk '{print $2}')
  if [ -n "$selected" ]; then
      selected=$(tr '\n' ' ' <<< "$selected")
      git add $selected
      echo "Completed: git add $selected"
  fi
}
### diff
fgd () {
  if [ "$(command -v delta)" ] && delta --version > /dev/null 2>&1; then
    fselectgitcommit | xargs -n 2 git --no-pager diff | delta
  else
    fselectgitcommit | xargs -n 2 git diff
  fi
}
#### checkout branch/tag
fgco () {
  local tags branches target
  branches=$(
    git --no-pager branch --all \
      --format="%(if)%(HEAD)%(then)%(else)%(if:equals=HEAD)%(refname:strip=3)%(then)%(else)%1B[0;34;1mbranch%09%1B[m%(refname:short)%(end)%(end)" \
    | sed '/^$/d') || return
  tags=$(
    git --no-pager tag | awk '{print "\x1b[35;1mtag\x1b[m\t" $1}') || return
  target=$(
    (echo "$branches"; echo "$tags") |
    fzf --no-hscroll --no-multi -n 2 \
        --ansi --preview="git --no-pager log -150 --pretty=format:%s '..{2}'") || return
  git checkout $(awk '{print $2}' <<<"$target" )
}
#### checkout commit
fgcoc () {
  fselectgitcommit | xargs -n 1 git checkout
}
### reset
fgreset () {
  local flag
  flag=${1:?input --hard/--soft}
  fselectgitcommit | xargs -n 1 git reset ${flag}
}

# ghq, hub
alias ghql='cd $(ghq root)/$(ghq list | fzf)'
alias ghqo='code $(cd $(ghq root)/$(ghq list | fzf) && pwd)'
alias ghqv='$(cd $(ghq root)/$(ghq list | fzf) && gh browse)'
# docker
alias dcu='docker-compose up -d'
alias dcd='docker-compose down'
alias dcr='docker-compose restart'
alias dp='docker ps'
alias dx='docker exec -it'
alias dr='docker run -it --rm=true'
# chezmoi ("dotfile")
alias dotf='chezmoi'
alias dotfile='chezmoi'
alias dotfcd='pushd $(chezmoi source-path) > /dev/null 2>&1 || exit'
alias dotfd='chezmoi diff'
# tmux
alias tm='tmux'
alias :vsp='tmux split-window -h'
alias :sp='tmux split-window -v'

{{ if and (lookPath "wsl.exe") (lookPath "powershell.exe") -}}
# WSL
## share clipboard
alias pbcopy='clip.exe'
alias pbpaste='powershell.exe -Command Get-Clipboard'
{{ end }}

#########################################################
# add by user end
#########################################################
