#!/usr/bin/env sh
#
# color log.
# log_(success|error|warning|note) uses stdout(color) only
# logger_(success|error|warning|note) uses stdout(color) and syslog(no-color)
# separator uses stdout(color)
# print_script_info uses stdout(color)
#
# If defined MY_OWN__LOG_SILENT, output nothing without logger_* syslog

. $HOME/.local/bin/my_own/_color


_log() {
  [ -v MY_OWN__LOG_SILENT ] && return 0
  __template="$1"
  shift
  echo "$(printf "$__template" "$@")" >&2
  unset __template
}


log_success() {  _log "$Green✔ %s$ResetColor\n" "$@"; }
log_error() {    _log "$Red✖ %s$ResetColor\n" "$@"; }
log_warning() {  _log "$Yellow➜ %s$ResetColor\n" "$@"; }
log_note() {     _log "$Blue%s$ResetColor\n" "$@"; }


logger_success() {  _log "$Green✔ %s$ResetColor\n" "$@";  logger -p user.info "$@"; }
logger_error() {    _log "$Red✖ %s$ResetColor\n" "$@";    logger -p user.err "$@"; }
logger_warning() {  _log "$Yellow➜ %s$ResetColor\n" "$@"; logger -p user.warning "$@"; }
logger_note() {     _log "$Blue%s$ResetColor\n" "$@";      logger -p user.notice "$@"; }


separator() {
  [ "$(command -v tput)" ] && _width=$(tput cols 2> /dev/null)
  echo "$(seq ${_width:-48} | xargs -I{} printf -- '%c' ${1:-#})"  # default width:48, char: #
  unset _width
}


print_script_info() {
   log_note $(separator)
   log_note "$0"
   for arg; do
      log_note "$arg"
   done
   log_note $(separator)
}


print_script_info_error() {
   log_error $(separator)
   log_error "$0"
   for arg; do
      log_error "$arg"
   done
   log_error $(separator)
}