# builtin-colorize
alias diff='diff --color=auto'
alias grep='grep --color=auto'
alias ls='ls -color=auto'
alias ip='ip -color=auto'
# builtin-utility
## search
alias 'psa'='ps ax'
alias 'lsofi'='lsof -i -P'
## git
alias g='git'
alias ga='git add'
alias gd='git diff'
alias gs='git status'
alias gp='git push'
alias gb='git branch'
alias gst='git status'
alias gco='git checkout'
alias gf='git fetch'
alias gc='git commit'
alias gcfg='git config'
alias gqp='git add . && git commit -m fix && git push'
alias cdg='cd $(git rev-parse --show-toplevel)'  # cd to .git project root
## safety
alias cp='cp -i'
alias mv='mv -i'
alias rm='rm -i'
## ssh
alias ssh='ssh -o ForwardAgent=yes -o ControlMaster=auto -o ControlPersist=60s -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'

# modern cli tools
## ls, tree to exa
if [ "$(command -v z)" ]; then
  alias ls='exa'
  alias tree='exa --tree'
fi
## cat to bat
if [ "$(command -v bat)" ]; then
  alias cat='bat'
fi
## cd to z
if [ "$(command -v zoxide)" ]; then
  alias ..='z ..'
  alias ...='z ../..'
  alias ....='z ../../..'
  alias .....='z ../../../..'
  alias c='z'
  alias cd='z'
fi
## peco
if [ "$(command -v peco)" ]; then
  _peco_search_history() {  ## Ctrl + r history search with peco
  	local l=$(HISTTIMEFORMAT= history | \
  	sort -r | sed -E s/^\ *[0-9]\+\ \+// | \
  	peco --query "$READLINE_LINE")
  	READLINE_LINE="$l"
  	READLINE_POINT=${#l}
  }
  bind -x '"\C-r": _peco_search_history'
fi

# docker
if [ "$(command -v docker-compose)" ]; then
  alias dcu='docker-compose up -d'
  alias dcd='docker-compose down'
  alias dcr='docker-compose restart'
fi
if [ "$(command -v docker)" ]; then
  alias dp='docker ps'
  alias dx='docker exec -it'
  alias dr='docker run -it --rm=true'
fi
# chezmoi ("dotfile")
if [ "$(command -v chezmoi)" ]; then
  alias dotf='chezmoi'
  alias dotf-cd='pushd $(chezmoi source-path) > /dev/null 2>&1 || exit'
fi


# functions

#######################################
# mkdir and cd
# Arguments:
#   path
# Returns:
#   0 is ok, non-zero on error.
#######################################
mkdircd () {
  mkdir -p $1 && cd "$_" || exit
}

#######################################
# chaet
# Arguments:
#   command you want to cheat
# Returns:
#   0 is ok, non-zero on error.
#######################################
cheat () {
  curl "cheat.sh/$1"
}

#######################################
# switch file to back/front
# Arguments:
#   $1: bak or fr
#   $2: file path
# Returns:
#   0 is ok, non-zero on error.
#######################################
sw () {
  if [ $# != 2 ]; then echo "sw: argument error." >&2; return 1; fi
  if [ $1 = "bak" ]; then mv -i $2{,.bak};
  elif [ $1 = "fr" ]; then mv -i $2{.bak,};
  else echo "sw: argument parse error $1." >&2 ; fi
}